// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  uid              String  @unique
  authProviderName String
  imgUrl           String?

  fullName         String
  dateOfBirth      DateTime?
  email            String    @unique
  phone            String
  acceptEmail      Boolean?
  selectedLanguage String?

  address   Address @relation(fields: [addressId], references: [id])
  addressId String  @unique @db.ObjectId

  orders   Order[]
  Comment  Comment[]
  WishList WishList?
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  street     String
  stNum      Int
  entrance   String?
  apartment  Int
  city       String
  postalCode String
  User       User?
}

model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name          String                @unique
  brand         String
  description   String
  base_price    Int
  selling_price Int
  reduction_p   Int?                  @default(0)
  supply        Int?
  imgUrl        String?
  active        Boolean
  translations  productTranslations[]

  Comment Comment[]

  categorys   Category[] @relation(fields: [categoryIds], references: [id])
  categoryIds String[]   @db.ObjectId

  ProductInCart ProductInCart?

  WishList   WishList[] @relation(fields: [wishListId], references: [id])
  wishListId String[]   @db.ObjectId

  Specification Specification[]
}

model Specification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  color     String?
  size      String?
  curve     String?
  thickness String?
  length    String?
  supply    Int

  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @unique @db.ObjectId
}

model productTranslations {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  language    String?
  name        String?
  description String?
  Product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String?  @db.ObjectId
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  imgUrl      String
  name        String @unique
  description String

  products    Product[] @relation(fields: [productsIds], references: [id])
  productsIds String[]  @db.ObjectId
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  cartProducts ProductInCart[]

  totalItems Int?
  totalPrice Int?

  status Status @default(WAITING_FOR_PAYMENT)
}

model ProductInCart {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique @db.ObjectId

  count     Int
  color     String?
  sizes     String?
  curves    String?
  thickness String?

  Order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique @db.ObjectId

  body   String
  rating Int
}

model WishList {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique @db.ObjectId
  products    Product[] @relation(fields: [productsIds], references: [id])
  productsIds String[]  @unique @db.ObjectId
}

enum Role {
  USER
  ADMIN
  EMPLOYEE
}

enum Status {
  WAITING_FOR_PAYMENT
  PAYED
  WAITING_FOR_APROVEMENT
  APROVED
  WAITING_FOR_DELIVERY
  IN_DELIVERY
  ARIVED
  ISSUE
  IN_VERIFICATION
}
