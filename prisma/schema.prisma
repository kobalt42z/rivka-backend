// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  email            String   @unique
  phone            String
  acceptEmail      Boolean
  selectedLanguage String
  hash             String
  role             Role     @default(USER)
  orders           Order[]
}

model Order {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  products  Product[]
}

model Product {
  id            String                @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now()) @updatedAt
  name          String                @unique
  brand         String
  description   String
  base_price    Int
  selling_price Int
  reduction_p   Int?                  @default(0)
  supply        Int
  imgUrl        String?
  colors        String[]
  sizes         String[]
  curves        String[]
  thickness     String[]
  order         Order?                @relation(fields: [orderId], references: [id])
  orderId       String?               @db.ObjectId
  categorys     Category[]            @relation(fields: [categoryIds], references: [id])
  categoryIds   String[]              @db.ObjectId
  translations  productTranslations[]
  active        Boolean
  ProductInCart ProductInCart?
}

model productTranslations {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  language    String
  name        String?
  description String?

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?  @db.ObjectId
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  imgUrl      String
  name        String    @unique
  description String
  products    Product[] @relation(fields: [productsIds], references: [id])
  productsIds String[]  @db.ObjectId
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  CartProducts    ProductInCart[] @relation(fields: [CartProductsIds], references: [id])
  CartProductsIds String[]        @db.ObjectId
}

model ProductInCart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  count     Int
  productId String   @unique @db.ObjectId
  Cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    String?  @db.ObjectId
}

enum Role {
  USER
  ADMIN
  EMPLOYEE
}
